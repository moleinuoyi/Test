#include<stdio.h>
#include<stdlib.h>
#include <string.h> 
#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define OVERFLOW -2
typedef int Int;		//取别名int=Int；

typedef struct{
	char no[10];
	char name[10];
	Int score;
}ElemTpe;

typedef struct LNode{             //定义线性链表
	ElemTpe date;
	struct LNode *next;
}LNode,*LinkList;

Int InitList(LinkList & l);											//线性链表初始化
Int DestoryList(LinkList & l);										//销毁链表
Int ListInsert(LinkList L,int i,ElemTpe e);							//向线性列表写入数据插入元素
void ListTraverse(LinkList L,void(*visit)(ElemTpe &l));				//遍历线性链表并输出里面的函数
int LocateElem(LinkList L,ElemTpe e,Int(*compare)(ElemTpe,ElemTpe));//查找元素徐学生信息比较函数
Int GetElem(LinkList L,int i,ElemTpe &e);							//取元素，并将查找到的信息存入e
Int ListDelete_L(LinkList &l,int i,ElemTpe &e);						//删除学生元素
void print(ElemTpe &c);												//输出
Int no(ElemTpe c1,ElemTpe c2);										//比较学号
Int name(ElemTpe c1,ElemTpe c2);									//比较姓名
/********************************************************************/
int main(){
	int h;
	char g;
	LinkList L;
	ElemTpe a[5]={{"1001","张小凡",98},{"1002","万碧瑶",89},{"1003","石昊",78},{"1004","萧炎",32},{"1005","林清竹",56}};
	InitList(L); // 初始化线性表L
	for(int j=4;j>=0;j--)ListInsert(L,1,a[j]); // 在L的表头插入a[j]
	printf("学号\t姓名\t成绩\n");
	printf("============================\n");
	ListTraverse(L,print);//遍历并输出所有信息

	printf("请按提示操作：\n");
	A:printf("1.按学号查询\n2.按姓名查询\n3.插入学生信息\n4.删除学生信息\n");
	scanf("%d",&h);
	if(h>4 || h<0){
		printf("输入错误，请从新输入：");
		scanf("%d",&h);
	}
	ElemTpe e;   //用于输入查找的信息
	ElemTpe e0;  //用于暂时存放匹配后的信息
    int k;
	switch(h){
		case 1: {
			printf("\n请输入你要查找学生学号：");
			scanf("%s",e.no);
			k=LocateElem(L,e,no);		//no为函数，e为查找的学生信息
			if(k){						// k不为0，表明有符合条件的元素，并且位置k为查找成功的学生信息
					 GetElem(L,k,e0);	//取出第k名学生的信息，并将其存入e0
					 printf("第%d个元素为你要查找的元素\n",k);
					 printf("该元素的值为：\n");
					 print(e0);			//输出查找后的信息
				  }
			else  printf("没有符合条件的元素\n");      // k为0，没有符合条件的元素
				}break;
		case 2:{
			printf("\n请输入你要查找学生姓名：");
			scanf("%s",e.name);
			k=LocateElem(L,e,name);
			if(k){ 
				GetElem(L,k,e0);
				printf("该元素的值为：\n");
				print(e0);
				}
			else  printf("没有符合条件的元素\n");
			   };break;
		case 3:{
			int w;
			printf("请输入学生信息插入位置：");
			scanf("%d",&w);
			if(w<7 && w>0){
				printf("输入错误，请重新输入！");
				scanf("%d",&w);
			}
			printf("请输入插入学生信息（学号、姓名、成绩）：");
			scanf("%s%s%d",&e.no,&e.name,&e.score);
			ListInsert(L,w,e);
			printf("插入后：\n");
			ListTraverse(L,print);
			   };break;
		case 4:{
			int w;
			printf("请输入要删除元素的位置：");
			scanf("%d",&w);
			ListDelete_L(L,w,e0);
			printf("删除的元素为：");
			print(e0);
			printf("\n");
			printf("删除后学生信息为：\n");
			printf("学号\t姓名\t成绩\n");
			printf("============================\n");
			ListTraverse(L,print);

			   };break;
	}
	printf("是否清屏？（y/n）");
	getchar();
	scanf("%c",&g);
	if(g=='y')system("CLS");
	printf("是否返回主菜单？（y/n）");
	getchar();
	scanf("%c",&g);
	if(g=='y')goto A;
	else printf("再见！！\n");
	DestoryList(L);				//销毁链表
	return 0;
}
/*********************************************************/
Int InitList(LinkList & l){					 //线性链表初始化
	l=(LinkList)malloc(sizeof(LNode));		//生成头节点
	if(l==NULL )exit(OVERFLOW);				// 存储分配失败
	l->next=NULL;
	return OK;
}

Int DestoryList(LinkList & l){     //销毁链表
	while(l->next){
		l=l->next;
		free(l);
		return OK;
	}
	return 0;
}

Int ListInsert(LinkList L,int i,ElemTpe e){		//向线性列表写入数据插入元素
	int j=0;
	LinkList s,p=L;								//定义*LinkList是线性链表的指针
	while(p!=0 && j<i-1){						//找到第i个位置
		p=p->next;								// p指向下一个结点
		j++;
	}
	if(!p || j>i-1)return ERROR;
	s=(LinkList)malloc(sizeof(LNode));			// 生成新结点，以下将其插入L中
	s->date=e;									// 将e赋给新结点
    s->next=p->next;							// 新结点指向原第i个结点
    p->next=s;									// 原第i-1个结点指向新结点
   return OK;									// 插入成功
}

void ListTraverse(LinkList L,void(*visit)(ElemTpe &l)){		//遍历线性链表并输出里面的函数
	LinkList p=L->next;										// p指向第1个结点
	while(p!=0){
		visit(p->date);										 // 对p所指结点调用函数visit()
		p=p->next;											// p指向下一个结点
	}
	printf("\n");
}

int LocateElem(LinkList L,ElemTpe e,Int(*compare)(ElemTpe,ElemTpe)){		//查找元素徐学生信息比较函数
	int i=0;
	LinkList p=L->next;
	while(p!=0){
		i++;
		if(compare(p->date,e))return i;										//找到返回是第几个元素
		p=p->next;
	}
	return 0;
}

Int GetElem(LinkList L,int i,ElemTpe &e){       //取元素，并将查找到的信息存入e
	int j=1;
	LinkList p=L->next;
	while(p!=0 && j<i){
		j++; 
		p=p->next;
	}
	e=p->date;
   return OK;
}

Int ListDelete_L(LinkList &l,int i,ElemTpe &e){
	LinkList q,p=l;
	int j=0;
	while(p->next && j<i-1){
		p=p->next;
		++j;
	}
	if(!(p->next) || j>i-1)return ERROR;
	q=p->next;
	p->next=q->next;
	e=q->date;
	free(q);
	return OK;
}

void print(ElemTpe &c){  
	 printf("%s\t%s\t%d\n",c.no,c.name,c.score);  
 }     
Int no(ElemTpe c1,ElemTpe c2){ //比较学号是否匹配
	if(strcmp(c1.no,c2.no)==0) return TRUE;
	else return FALSE;
}
Int name(ElemTpe c1,ElemTpe c2){ //比较姓名是否匹配
	if(strcmp(c1.name,c2.name)==0) return TRUE;
	else return FALSE;
}
